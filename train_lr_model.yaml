name: Train lr
description: train a LogisticRegression with default parameters
inputs:
- {name: features, type: typing.Dict}
- {name: project_id, type: String}
- {name: model_repo, type: String}
outputs:
- {name: Output, type: typing.Dict}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'google-cloud-storage' 'pandas' 'joblib' 'scikit-learn' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'
      'pandas' 'joblib' 'scikit-learn' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def train_lr (features, project_id, model_repo):\n    '''train a LogisticRegression\
      \ with default parameters'''\n    import pandas as pd\n    from sklearn.linear_model\
      \ import LogisticRegression\n    from sklearn import metrics\n    from sklearn.model_selection\
      \ import train_test_split\n    from google.cloud import storage\n    import\
      \ json\n    import logging \n    import sys\n    import os\n    import joblib\n\
      \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    df =\
      \ pd.DataFrame.from_dict(features)  \n\n    logging.info(f\"Cols: {df.columns}\"\
      )        \n\n    x_train, x_test, y_train, y_test = train_test_split(df.drop('target',axis=1),\
      \ \n                                                        df['target'], test_size=0.30,\
      \ \n                                                        random_state=101)\n\
      \n    model = LogisticRegression(max_iter=1000)\n    model.fit(x_train,y_train)\n\
      \n    metrics = {\n        \"accuracy\": model.score(x_test, y_test)\n    }\n\
      \    logging.info(metrics)\n\n    # Save the model localy\n    local_file =\
      \ '/tmp/' + MODEL_PATH\n    joblib.dump(model, local_file)\n    # write out\
      \ output\n\n    # Save to GCS as model.h5\n    client = storage.Client(project=project_id)\n\
      \    bucket = client.get_bucket(model_repo)\n    blob = bucket.blob(MODEL_PATH)\n\
      \   # Upload the locally saved model\n    blob.upload_from_filename(local_file)\n\
      \n    print(\"Saved the model to GCP bucket : \" + model_repo)\n    return metrics\n\
      \ndef _serialize_json(obj) -> str:\n    if isinstance(obj, str):\n        return\
      \ obj\n    import json\n\n    def default_serializer(obj):\n        if hasattr(obj,\
      \ 'to_struct'):\n            return obj.to_struct()\n        else:\n       \
      \     raise TypeError(\n                \"Object of type '%s' is not JSON serializable\
      \ and does not have .to_struct() method.\"\n                % obj.__class__.__name__)\n\
      \n    return json.dumps(obj, default=default_serializer, sort_keys=True)\n\n\
      import json\nimport argparse\n_parser = argparse.ArgumentParser(prog='Train\
      \ lr', description='train a LogisticRegression with default parameters')\n_parser.add_argument(\"\
      --features\", dest=\"features\", type=json.loads, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--project-id\", dest=\"project_id\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--model-repo\", dest=\"\
      model_repo\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      ----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args\
      \ = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\"\
      , [])\n\n_outputs = train_lr(**_parsed_args)\n\n_outputs = [_outputs]\n\n_output_serializers\
      \ = [\n    _serialize_json,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
      \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
      \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --features
    - {inputValue: features}
    - --project-id
    - {inputValue: project_id}
    - --model-repo
    - {inputValue: model_repo}
    - '----output-paths'
    - {outputPath: Output}
